// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Movie {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    url        String
    characters String[]
    Room       Room[]
}

model Annotation {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())

    sessionAssignmentId String  @db.ObjectId
    frameNumber         Int
    valence             Valence

    sessionAssignment SessionAssignment @relation(fields: [sessionAssignmentId], references: [id])
}

model Room {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    roomCode String  @unique
    movieId  String  @db.ObjectId
    isActive Boolean @default(true)

    movie Movie @relation(fields: [movieId], references: [id])

    SessionAssignment SessionAssignment[]
}

model SessionAssignment {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    userId    String  @db.ObjectId
    roomId    String  @db.ObjectId
    character String
    emotion   Emotion
    isActive  Boolean @default(true)

    room Room? @relation(fields: [roomId], references: [id])
    user User  @relation(fields: [userId], references: [id])

    Annotation Annotation[]
}

// Auto Generated by Next-Auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Auto Generated by Next-Auth
model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Auto Generated by Next-Auth
model User {
    id                String              @id @default(auto()) @map("_id") @db.ObjectId
    name              String?
    email             String?             @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    SessionAssignment SessionAssignment[]
}

// Auto Generated by Next-Auth
model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Emotion {
    HAPPINESS
    SADNESS
    ANGER
    FEAR
    SURPRISE
    DISGUST
}

enum Valence {
    UNDEFINED
    ONE
    TWO
    THREE
    FOUR
    FIVE
}
